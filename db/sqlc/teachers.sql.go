// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: teachers.sql

package db

import (
	"context"
)

const createTeacher = `-- name: CreateTeacher :one
INSERT INTO teachers(
    user_id,
    admin_id,
    full_name,
    email,
    qualification,
    user_name,
    hashed_password,
    is_active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING teacher_id, admin_id, user_id, full_name, email, user_name, hashed_password, is_active, created_at, qualification
`

type CreateTeacherParams struct {
	UserID         int64  `json:"user_id"`
	AdminID        int64  `json:"admin_id"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
	Qualification  string `json:"qualification"`
	UserName       string `json:"user_name"`
	HashedPassword string `json:"hashed_password"`
	IsActive       bool   `json:"is_active"`
}

func (q *Queries) CreateTeacher(ctx context.Context, arg CreateTeacherParams) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, createTeacher,
		arg.UserID,
		arg.AdminID,
		arg.FullName,
		arg.Email,
		arg.Qualification,
		arg.UserName,
		arg.HashedPassword,
		arg.IsActive,
	)
	var i Teacher
	err := row.Scan(
		&i.TeacherID,
		&i.AdminID,
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.UserName,
		&i.HashedPassword,
		&i.IsActive,
		&i.CreatedAt,
		&i.Qualification,
	)
	return i, err
}

const deleteTeacher = `-- name: DeleteTeacher :exec
DELETE FROM teachers
WHERE teacher_id = $1
`

func (q *Queries) DeleteTeacher(ctx context.Context, teacherID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeacher, teacherID)
	return err
}

const getTeacher = `-- name: GetTeacher :one
SELECT teacher_id, admin_id, user_id, full_name, email, user_name, hashed_password, is_active, created_at, qualification FROM teachers
WHERE teacher_id = $1
`

func (q *Queries) GetTeacher(ctx context.Context, teacherID int64) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, getTeacher, teacherID)
	var i Teacher
	err := row.Scan(
		&i.TeacherID,
		&i.AdminID,
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.UserName,
		&i.HashedPassword,
		&i.IsActive,
		&i.CreatedAt,
		&i.Qualification,
	)
	return i, err
}

const listTeacher = `-- name: ListTeacher :many
SELECT teacher_id, admin_id, user_id, full_name, email, user_name, hashed_password, is_active, created_at, qualification FROM teachers
WHERE teacher_id = $1
ORDER BY teacher_id
LIMIT $2
OFFSET $3
`

type ListTeacherParams struct {
	TeacherID int64 `json:"teacher_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListTeacher(ctx context.Context, arg ListTeacherParams) ([]Teacher, error) {
	rows, err := q.db.QueryContext(ctx, listTeacher, arg.TeacherID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Teacher{}
	for rows.Next() {
		var i Teacher
		if err := rows.Scan(
			&i.TeacherID,
			&i.AdminID,
			&i.UserID,
			&i.FullName,
			&i.Email,
			&i.UserName,
			&i.HashedPassword,
			&i.IsActive,
			&i.CreatedAt,
			&i.Qualification,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeacher = `-- name: UpdateTeacher :one
UPDATE teachers
SET full_name = $2, email = $3, user_name = $4, hashed_password = $5, is_active = $6
WHERE teacher_id = $1
RETURNING teacher_id, admin_id, user_id, full_name, email, user_name, hashed_password, is_active, created_at, qualification
`

type UpdateTeacherParams struct {
	TeacherID      int64  `json:"teacher_id"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
	UserName       string `json:"user_name"`
	HashedPassword string `json:"hashed_password"`
	IsActive       bool   `json:"is_active"`
}

func (q *Queries) UpdateTeacher(ctx context.Context, arg UpdateTeacherParams) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, updateTeacher,
		arg.TeacherID,
		arg.FullName,
		arg.Email,
		arg.UserName,
		arg.HashedPassword,
		arg.IsActive,
	)
	var i Teacher
	err := row.Scan(
		&i.TeacherID,
		&i.AdminID,
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.UserName,
		&i.HashedPassword,
		&i.IsActive,
		&i.CreatedAt,
		&i.Qualification,
	)
	return i, err
}
