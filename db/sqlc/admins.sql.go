// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: admins.sql

package db

import (
	"context"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins (
    user_id,
    full_name,
    user_name,
    email,
    hashed_password
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING admin_id, user_id, role, user_name, hashed_password, full_name, email, created_at
`

type CreateAdminParams struct {
	UserID         int64  `json:"user_id"`
	FullName       string `json:"full_name"`
	UserName       string `json:"user_name"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin,
		arg.UserID,
		arg.FullName,
		arg.UserName,
		arg.Email,
		arg.HashedPassword,
	)
	var i Admin
	err := row.Scan(
		&i.AdminID,
		&i.UserID,
		&i.Role,
		&i.UserName,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM admins
WHERE admin_id = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, adminID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAdmin, adminID)
	return err
}

const getAdmin = `-- name: GetAdmin :one
SELECT admin_id, user_id, role, user_name, hashed_password, full_name, email, created_at FROM admins
WHERE admin_id = $1
`

func (q *Queries) GetAdmin(ctx context.Context, adminID int64) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdmin, adminID)
	var i Admin
	err := row.Scan(
		&i.AdminID,
		&i.UserID,
		&i.Role,
		&i.UserName,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const updateAdmin = `-- name: UpdateAdmin :one
UPDATE admins
SET full_name = $2, user_name = $3, email = $4, hashed_password = $5
WHERE admin_id = $1
RETURNING admin_id, user_id, role, user_name, hashed_password, full_name, email, created_at
`

type UpdateAdminParams struct {
	AdminID        int64  `json:"admin_id"`
	FullName       string `json:"full_name"`
	UserName       string `json:"user_name"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdateAdmin(ctx context.Context, arg UpdateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, updateAdmin,
		arg.AdminID,
		arg.FullName,
		arg.UserName,
		arg.Email,
		arg.HashedPassword,
	)
	var i Admin
	err := row.Scan(
		&i.AdminID,
		&i.UserID,
		&i.Role,
		&i.UserName,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
