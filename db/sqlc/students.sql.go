// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: students.sql

package db

import (
	"context"
	"database/sql"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (
    user_name
) VALUES (
    $1
) RETURNING student_id, user_name, created_at
`

func (q *Queries) CreateStudent(ctx context.Context, userName sql.NullString) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent, userName)
	var i Student
	err := row.Scan(&i.StudentID, &i.UserName, &i.CreatedAt)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :exec
DELETE FROM students
WHERE student_id = $1
`

func (q *Queries) DeleteStudent(ctx context.Context, studentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStudent, studentID)
	return err
}

const getStudent = `-- name: GetStudent :one
SELECT student_id, user_name, created_at FROM students
WHERE student_id = $1
`

func (q *Queries) GetStudent(ctx context.Context, studentID int64) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, studentID)
	var i Student
	err := row.Scan(&i.StudentID, &i.UserName, &i.CreatedAt)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT student_id, user_name, created_at FROM students
WHERE user_name = $1
ORDER BY student_id
LIMIT $2
OFFSET $3
`

type ListStudentsParams struct {
	UserName sql.NullString `json:"user_name"`
	Limit    int32          `json:"limit"`
	Offset   int32          `json:"offset"`
}

func (q *Queries) ListStudents(ctx context.Context, arg ListStudentsParams) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, listStudents, arg.UserName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Student{}
	for rows.Next() {
		var i Student
		if err := rows.Scan(&i.StudentID, &i.UserName, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE students
SET user_name = $2
WHERE student_id = $1
RETURNING student_id, user_name, created_at
`

type UpdateStudentParams struct {
	StudentID int64          `json:"student_id"`
	UserName  sql.NullString `json:"user_name"`
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, updateStudent, arg.StudentID, arg.UserName)
	var i Student
	err := row.Scan(&i.StudentID, &i.UserName, &i.CreatedAt)
	return i, err
}
