// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: courses.sql

package db

import (
	"context"
)

const createCourses = `-- name: CreateCourses :one
INSERT INTO courses (
    title,
    type,
    description
) VALUES (
    $1, $2, $3
) RETURNING course_id, teacher_id, title, type, description, created_at
`

type CreateCoursesParams struct {
	Title       string `json:"title"`
	Type        string `json:"type"`
	Description string `json:"description"`
}

func (q *Queries) CreateCourses(ctx context.Context, arg CreateCoursesParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, createCourses, arg.Title, arg.Type, arg.Description)
	var i Course
	err := row.Scan(
		&i.CourseID,
		&i.TeacherID,
		&i.Title,
		&i.Type,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCourses = `-- name: DeleteCourses :exec
DELETE FROM courses
WHERE course_id = $1
`

func (q *Queries) DeleteCourses(ctx context.Context, courseID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCourses, courseID)
	return err
}

const getCourses = `-- name: GetCourses :one
SELECT course_id, teacher_id, title, type, description, created_at FROM courses
WHERE course_id = $1
`

func (q *Queries) GetCourses(ctx context.Context, courseID int64) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourses, courseID)
	var i Course
	err := row.Scan(
		&i.CourseID,
		&i.TeacherID,
		&i.Title,
		&i.Type,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listCourses = `-- name: ListCourses :many
SELECT course_id, teacher_id, title, type, description, created_at FROM courses
WHERE course_id = $1
ORDER BY course_id
LIMIT $2
OFFSET $3
`

type ListCoursesParams struct {
	CourseID int64 `json:"course_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListCourses(ctx context.Context, arg ListCoursesParams) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, listCourses, arg.CourseID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.CourseID,
			&i.TeacherID,
			&i.Title,
			&i.Type,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourses = `-- name: UpdateCourses :one
UPDATE courses
SET title = $2, type = $3, description = $4
WHERE course_id = $1
RETURNING course_id, teacher_id, title, type, description, created_at
`

type UpdateCoursesParams struct {
	CourseID    int64  `json:"course_id"`
	Title       string `json:"title"`
	Type        string `json:"type"`
	Description string `json:"description"`
}

func (q *Queries) UpdateCourses(ctx context.Context, arg UpdateCoursesParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, updateCourses,
		arg.CourseID,
		arg.Title,
		arg.Type,
		arg.Description,
	)
	var i Course
	err := row.Scan(
		&i.CourseID,
		&i.TeacherID,
		&i.Title,
		&i.Type,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
