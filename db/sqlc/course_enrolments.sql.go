// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: course_enrolments.sql

package db

import (
	"context"
)

const createEnrolments = `-- name: CreateEnrolments :one
INSERT INTO course_enrolments (
    course_id,
    request_id,
    user_id
) VALUES (
    $1, $2, $3
) RETURNING enrolment_id, course_id, request_id, user_id
`

type CreateEnrolmentsParams struct {
	CourseID  int64 `json:"course_id"`
	RequestID int64 `json:"request_id"`
	UserID    int64 `json:"user_id"`
}

func (q *Queries) CreateEnrolments(ctx context.Context, arg CreateEnrolmentsParams) (CourseEnrolment, error) {
	row := q.queryRow(ctx, q.createEnrolmentsStmt, createEnrolments, arg.CourseID, arg.RequestID, arg.UserID)
	var i CourseEnrolment
	err := row.Scan(
		&i.EnrolmentID,
		&i.CourseID,
		&i.RequestID,
		&i.UserID,
	)
	return i, err
}

const listEnrolments = `-- name: ListEnrolments :many
SELECT enrolment_id, course_id, request_id, user_id FROM course_enrolments
ORDER BY enrolment_id
LIMIT $1
OFFSET $2
`

type ListEnrolmentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEnrolments(ctx context.Context, arg ListEnrolmentsParams) ([]CourseEnrolment, error) {
	rows, err := q.query(ctx, q.listEnrolmentsStmt, listEnrolments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CourseEnrolment{}
	for rows.Next() {
		var i CourseEnrolment
		if err := rows.Scan(
			&i.EnrolmentID,
			&i.CourseID,
			&i.RequestID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
