// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: requests.sql

package db

import (
	"context"
	"database/sql"
)

const createRequest = `-- name: CreateRequest :one
INSERT INTO requests (
    is_active,
    is_pending,
    is_accepted,
    is_declined
) VALUES (
    $1, $2, $3, $4
) RETURNING request_id, student_id, teacher_id, course_id, is_active, is_pending, is_accepted, is_declined, created_at
`

type CreateRequestParams struct {
	IsActive   sql.NullBool `json:"is_active"`
	IsPending  sql.NullBool `json:"is_pending"`
	IsAccepted sql.NullBool `json:"is_accepted"`
	IsDeclined sql.NullBool `json:"is_declined"`
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (Request, error) {
	row := q.db.QueryRowContext(ctx, createRequest,
		arg.IsActive,
		arg.IsPending,
		arg.IsAccepted,
		arg.IsDeclined,
	)
	var i Request
	err := row.Scan(
		&i.RequestID,
		&i.StudentID,
		&i.TeacherID,
		&i.CourseID,
		&i.IsActive,
		&i.IsPending,
		&i.IsAccepted,
		&i.IsDeclined,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRequest = `-- name: DeleteRequest :exec
DELETE FROM requests
WHERE student_id = $1 AND request_id = $2
`

type DeleteRequestParams struct {
	StudentID int64 `json:"student_id"`
	RequestID int64 `json:"request_id"`
}

func (q *Queries) DeleteRequest(ctx context.Context, arg DeleteRequestParams) error {
	_, err := q.db.ExecContext(ctx, deleteRequest, arg.StudentID, arg.RequestID)
	return err
}

const getRequest = `-- name: GetRequest :one
SELECT request_id, student_id, teacher_id, course_id, is_active, is_pending, is_accepted, is_declined, created_at FROM requests
WHERE student_id = $1 AND request_id = $2
`

type GetRequestParams struct {
	StudentID int64 `json:"student_id"`
	RequestID int64 `json:"request_id"`
}

func (q *Queries) GetRequest(ctx context.Context, arg GetRequestParams) (Request, error) {
	row := q.db.QueryRowContext(ctx, getRequest, arg.StudentID, arg.RequestID)
	var i Request
	err := row.Scan(
		&i.RequestID,
		&i.StudentID,
		&i.TeacherID,
		&i.CourseID,
		&i.IsActive,
		&i.IsPending,
		&i.IsAccepted,
		&i.IsDeclined,
		&i.CreatedAt,
	)
	return i, err
}

const listRequest = `-- name: ListRequest :many
SELECT request_id, student_id, teacher_id, course_id, is_active, is_pending, is_accepted, is_declined, created_at FROM requests
WHERE student_id = $1 AND teacher_id = $2 AND course_id =$3
ORDER BY request_id
LIMIT $4
OFFSET $5
`

type ListRequestParams struct {
	StudentID int64 `json:"student_id"`
	TeacherID int64 `json:"teacher_id"`
	CourseID  int64 `json:"course_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListRequest(ctx context.Context, arg ListRequestParams) ([]Request, error) {
	rows, err := q.db.QueryContext(ctx, listRequest,
		arg.StudentID,
		arg.TeacherID,
		arg.CourseID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Request{}
	for rows.Next() {
		var i Request
		if err := rows.Scan(
			&i.RequestID,
			&i.StudentID,
			&i.TeacherID,
			&i.CourseID,
			&i.IsActive,
			&i.IsPending,
			&i.IsAccepted,
			&i.IsDeclined,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRequests = `-- name: UpdateRequests :one
UPDATE requests
SET is_active = $4, is_pending = $5, is_accepted = $6, is_declined = $7 
WHERE student_id = $1 AND teacher_id = $2 AND course_id =$3
RETURNING request_id, student_id, teacher_id, course_id, is_active, is_pending, is_accepted, is_declined, created_at
`

type UpdateRequestsParams struct {
	StudentID  int64        `json:"student_id"`
	TeacherID  int64        `json:"teacher_id"`
	CourseID   int64        `json:"course_id"`
	IsActive   sql.NullBool `json:"is_active"`
	IsPending  sql.NullBool `json:"is_pending"`
	IsAccepted sql.NullBool `json:"is_accepted"`
	IsDeclined sql.NullBool `json:"is_declined"`
}

func (q *Queries) UpdateRequests(ctx context.Context, arg UpdateRequestsParams) (Request, error) {
	row := q.db.QueryRowContext(ctx, updateRequests,
		arg.StudentID,
		arg.TeacherID,
		arg.CourseID,
		arg.IsActive,
		arg.IsPending,
		arg.IsAccepted,
		arg.IsDeclined,
	)
	var i Request
	err := row.Scan(
		&i.RequestID,
		&i.StudentID,
		&i.TeacherID,
		&i.CourseID,
		&i.IsActive,
		&i.IsPending,
		&i.IsAccepted,
		&i.IsDeclined,
		&i.CreatedAt,
	)
	return i, err
}
