// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: materials.sql

package db

import (
	"context"
)

const createMaterial = `-- name: CreateMaterial :one
INSERT INTO materials (
    course_id,
    title,
    description
) VALUES (
    $1, $2, $3
) RETURNING material_id, course_id, title, description, created_at
`

type CreateMaterialParams struct {
	CourseID    int64  `json:"course_id"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) CreateMaterial(ctx context.Context, arg CreateMaterialParams) (Material, error) {
	row := q.queryRow(ctx, q.createMaterialStmt, createMaterial, arg.CourseID, arg.Title, arg.Description)
	var i Material
	err := row.Scan(
		&i.MaterialID,
		&i.CourseID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMaterial = `-- name: DeleteMaterial :exec
DELETE FROM materials
WHERE material_id = $1
`

func (q *Queries) DeleteMaterial(ctx context.Context, materialID int64) error {
	_, err := q.exec(ctx, q.deleteMaterialStmt, deleteMaterial, materialID)
	return err
}

const getMaterial = `-- name: GetMaterial :one
SELECT material_id, course_id, title, description, created_at FROM materials
WHERE material_id = $1
`

func (q *Queries) GetMaterial(ctx context.Context, materialID int64) (Material, error) {
	row := q.queryRow(ctx, q.getMaterialStmt, getMaterial, materialID)
	var i Material
	err := row.Scan(
		&i.MaterialID,
		&i.CourseID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listMaterial = `-- name: ListMaterial :many
SELECT material_id, course_id, title, description, created_at FROM materials
WHERE course_id = $1
ORDER BY material_id
LIMIT $2
OFFSET $3
`

type ListMaterialParams struct {
	CourseID int64 `json:"course_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListMaterial(ctx context.Context, arg ListMaterialParams) ([]Material, error) {
	rows, err := q.query(ctx, q.listMaterialStmt, listMaterial, arg.CourseID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Material{}
	for rows.Next() {
		var i Material
		if err := rows.Scan(
			&i.MaterialID,
			&i.CourseID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMaterial = `-- name: UpdateMaterial :one
UPDATE materials
SET title = $3, description = $4
WHERE material_id = $1 AND course_id = $2
RETURNING material_id, course_id, title, description, created_at
`

type UpdateMaterialParams struct {
	MaterialID  int64  `json:"material_id"`
	CourseID    int64  `json:"course_id"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) UpdateMaterial(ctx context.Context, arg UpdateMaterialParams) (Material, error) {
	row := q.queryRow(ctx, q.updateMaterialStmt, updateMaterial,
		arg.MaterialID,
		arg.CourseID,
		arg.Title,
		arg.Description,
	)
	var i Material
	err := row.Scan(
		&i.MaterialID,
		&i.CourseID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
